{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"01_introduction_and_goals/","text":"Einf\u00fchrung und Ziele {#section-introduction-and-goals} In diesem Projekt wird eine Autovermietung in Form einer Web-API von A-Z umgesetzt. Dabei ist alles von Auto- und Kundenverwaltung bis hin zur Reservation und Mietvertragerstellung inbegriffen. Folgende Anforderungen wurden gestellt: Der Sachbearbeiter kann Kunden mit Namen und Adresse und Kundennummer im System verwalten, d.h. erfassen, bearbeiten, l\u00f6schen und den Kunden mit dessen Namen oder Kundennummer suchen. Der Sachbearbeiter kann zudem die Autos von CarRent verwalten und nach denen suchen. Jedes Auto kann einer bestimmten Klasse zwischen Luxusklasse, Mittelklasse oder Einfachklasse zugeordnet werden und besitzt zudem eine Marke, einen Typ und eine eindeutige Identifikation. Jede Klasse besitzt eine Tagesgeb\u00fchr. Bei einer neuen Reservation kann der Kunde ein Auto aus einer bestimmten Klasse w\u00e4hlen. Er muss zudem die Anzahl der Tage angeben, die er das Auto gerne mieten m\u00f6chte. Dabei werden die Gesamtkosten berechnet. Wird die Reservation gespeichert, so wird sie mit einer Reservationsnummer ablegt. Bei Abholung des Autos wird die Reservation in einen Mietvertrag umgewandelt. Qualit\u00e4tsziele {#_qualit_tsziele} Einfache Verwaltung Damit ist die Verwaltung der Autos und Kunden gemeint. Hier ist es wichtig, Kunden und Autos erstellen, bearbeiten und l\u00f6schen zu k\u00f6nnen. Einfache Suche Dem Sachbearbeiter ist es wichtig, Autos und Kunden einfach zu finden. Es ist m\u00f6glich, Kunden per Kundennummer oder Namen zu suchen. Autos sind per Identifikationsnummer zu finden. Mietvertrag Auch hier ist es dem Sachbearbeiter wichtig, in wenigen Schritten einen Mietvertrag erstellt zu haben. Stakeholder {#_stakeholder}","title":"01 introduction and goals"},{"location":"01_introduction_and_goals/#einfuhrung-und-ziele-section-introduction-and-goals","text":"In diesem Projekt wird eine Autovermietung in Form einer Web-API von A-Z umgesetzt. Dabei ist alles von Auto- und Kundenverwaltung bis hin zur Reservation und Mietvertragerstellung inbegriffen. Folgende Anforderungen wurden gestellt: Der Sachbearbeiter kann Kunden mit Namen und Adresse und Kundennummer im System verwalten, d.h. erfassen, bearbeiten, l\u00f6schen und den Kunden mit dessen Namen oder Kundennummer suchen. Der Sachbearbeiter kann zudem die Autos von CarRent verwalten und nach denen suchen. Jedes Auto kann einer bestimmten Klasse zwischen Luxusklasse, Mittelklasse oder Einfachklasse zugeordnet werden und besitzt zudem eine Marke, einen Typ und eine eindeutige Identifikation. Jede Klasse besitzt eine Tagesgeb\u00fchr. Bei einer neuen Reservation kann der Kunde ein Auto aus einer bestimmten Klasse w\u00e4hlen. Er muss zudem die Anzahl der Tage angeben, die er das Auto gerne mieten m\u00f6chte. Dabei werden die Gesamtkosten berechnet. Wird die Reservation gespeichert, so wird sie mit einer Reservationsnummer ablegt. Bei Abholung des Autos wird die Reservation in einen Mietvertrag umgewandelt.","title":"Einf\u00fchrung und Ziele {#section-introduction-and-goals}"},{"location":"01_introduction_and_goals/#qualitatsziele-_qualit_tsziele","text":"Einfache Verwaltung Damit ist die Verwaltung der Autos und Kunden gemeint. Hier ist es wichtig, Kunden und Autos erstellen, bearbeiten und l\u00f6schen zu k\u00f6nnen. Einfache Suche Dem Sachbearbeiter ist es wichtig, Autos und Kunden einfach zu finden. Es ist m\u00f6glich, Kunden per Kundennummer oder Namen zu suchen. Autos sind per Identifikationsnummer zu finden. Mietvertrag Auch hier ist es dem Sachbearbeiter wichtig, in wenigen Schritten einen Mietvertrag erstellt zu haben.","title":"Qualit\u00e4tsziele {#_qualit_tsziele}"},{"location":"01_introduction_and_goals/#stakeholder-_stakeholder","text":"","title":"Stakeholder {#_stakeholder}"},{"location":"02_system_scope/","text":"Kontextabgrenzung {#section-system-scope-and-context} Fachlicher Kontext {#_fachlicher_kontext} An der folgenden Darstellung sieht man, wie die Abgrenzung zwischen den Systemen ist. Technischer Kontext {#_technischer_kontext} Folgende M\u00f6glichkeiten mit Http Requests sind gegeben: Ausnahme: Beim Contract ist die HttpPut nicht m\u00f6glich.","title":"02 system scope"},{"location":"02_system_scope/#kontextabgrenzung-section-system-scope-and-context","text":"","title":"Kontextabgrenzung {#section-system-scope-and-context}"},{"location":"02_system_scope/#fachlicher-kontext-_fachlicher_kontext","text":"An der folgenden Darstellung sieht man, wie die Abgrenzung zwischen den Systemen ist.","title":"Fachlicher Kontext {#_fachlicher_kontext}"},{"location":"02_system_scope/#technischer-kontext-_technischer_kontext","text":"Folgende M\u00f6glichkeiten mit Http Requests sind gegeben: Ausnahme: Beim Contract ist die HttpPut nicht m\u00f6glich.","title":"Technischer Kontext {#_technischer_kontext}"},{"location":"03_solution_strategy/","text":"L\u00f6sungsstrategie {#section-solution-strategy} Die Entscheidung \u00fcber den Entwurf ist durch die Bedienung getroffen worden. Die einfache Bedienung ist f\u00fcr den Kunden wichtig und hat daher sehr in den Entwurf reingespielt. Mit dem Entity FrameWork Core wurde die Migration der Datenbank vorgenommen. Als Datenbank wird ein MySQL Server verwendet. F\u00fcr Kunde, Auto, Reservation und Mietvertrag wird jeweils ein Model verwendet, in dem auch Annotations f\u00fcr die Datenbank aufgef\u00fchrt sind.","title":"03 solution strategy"},{"location":"03_solution_strategy/#losungsstrategie-section-solution-strategy","text":"Die Entscheidung \u00fcber den Entwurf ist durch die Bedienung getroffen worden. Die einfache Bedienung ist f\u00fcr den Kunden wichtig und hat daher sehr in den Entwurf reingespielt. Mit dem Entity FrameWork Core wurde die Migration der Datenbank vorgenommen. Als Datenbank wird ein MySQL Server verwendet. F\u00fcr Kunde, Auto, Reservation und Mietvertrag wird jeweils ein Model verwendet, in dem auch Annotations f\u00fcr die Datenbank aufgef\u00fchrt sind.","title":"L\u00f6sungsstrategie {#section-solution-strategy}"},{"location":"04_building_block_view/","text":"Bausteinsicht {#section-building-block-view} Context Containers Components Im folgendem Diagramm ist aufgezeigt, wie der Zugriff auf die Car Klasse gew\u00e4hrleistet ist. Speziell hier ist der Baustein \"Automapper\". Mit diesem Paket wird die Car Klasse zur CarReadDto Klasse gemappt. Die CarReadDto (Data Transfer Object) wird benutzt, um dem Benutzer nur gewollte Informationen mitzuteilen. In dem Fall der Car Klasse werden alle Infos mitgegeben, da sie nur f\u00fcr den Sachbearbeiter gedacht ist und daher keine Infos vorbehalten werden m\u00fcssen. Jede Anfrage wird zuerste gemappt, damit das Datenhandling gut funktioniert. Bei falscher Eingabe resultiert ein Bad Request.","title":"04 building block view"},{"location":"04_building_block_view/#bausteinsicht-section-building-block-view","text":"Context Containers Components Im folgendem Diagramm ist aufgezeigt, wie der Zugriff auf die Car Klasse gew\u00e4hrleistet ist. Speziell hier ist der Baustein \"Automapper\". Mit diesem Paket wird die Car Klasse zur CarReadDto Klasse gemappt. Die CarReadDto (Data Transfer Object) wird benutzt, um dem Benutzer nur gewollte Informationen mitzuteilen. In dem Fall der Car Klasse werden alle Infos mitgegeben, da sie nur f\u00fcr den Sachbearbeiter gedacht ist und daher keine Infos vorbehalten werden m\u00fcssen. Jede Anfrage wird zuerste gemappt, damit das Datenhandling gut funktioniert. Bei falscher Eingabe resultiert ein Bad Request.","title":"Bausteinsicht {#section-building-block-view}"},{"location":"05_runtime_view/","text":"Laufzeitsicht {#section-runtime-view} In folgendem Diagram sieht man ein Beispiel, wie ein Sachbearbeiter ein neues Fahrzeug ins System aufnimmt.","title":"05 runtime view"},{"location":"05_runtime_view/#laufzeitsicht-section-runtime-view","text":"In folgendem Diagram sieht man ein Beispiel, wie ein Sachbearbeiter ein neues Fahrzeug ins System aufnimmt.","title":"Laufzeitsicht {#section-runtime-view}"},{"location":"06_deployment_view/","text":"Verteilungssicht {#section-deployment-view}","title":"06 deployment view"},{"location":"06_deployment_view/#verteilungssicht-section-deployment-view","text":"","title":"Verteilungssicht {#section-deployment-view}"},{"location":"about-arc42/","text":"\u00dcber arc42 arc42, das Template zur Dokumentation von Software- und Systemarchitekturen. Erstellt von Dr. Gernot Starke, Dr. Peter Hruschka und Mitwirkenden. Template Revision: 7.0 DE (asciidoc-based), January 2017 \u00a9 We acknowledge that this document uses material from the arc42 architecture template, http://www.arc42.de . Created by Dr. Peter Hruschka & Dr. Gernot Starke.","title":"About arc42"},{"location":"arc42-template/","text":"\u00dcber arc42 arc42, das Template zur Dokumentation von Software- und Systemarchitekturen. Erstellt von Dr. Gernot Starke, Dr. Peter Hruschka und Mitwirkenden. Template Revision: 7.0 DE (asciidoc-based), January 2017 \u00a9 We acknowledge that this document uses material from the arc42 architecture template, http://www.arc42.de . Created by Dr. Peter Hruschka & Dr. Gernot Starke. Note Diese Version des Templates enth\u00e4lt Hilfen und Erl\u00e4uterungen. Sie dient der Einarbeitung in arc42 sowie dem Verst\u00e4ndnis der Konzepte. F\u00fcr die Dokumentation eigener System verwenden Sie besser die plain Version. Einf\u00fchrung und Ziele {#section-introduction-and-goals} Beschreibt die wesentlichen Anforderungen und treibenden Kr\u00e4fte, die bei der Umsetzung der Softwarearchitektur und Entwicklung des Systems ber\u00fccksichtigt werden m\u00fcssen. Dazu geh\u00f6ren: zugrunde liegende Gesch\u00e4ftsziele, wesentliche Aufgabenstellungen und essenzielle fachliche Anforderungen an das System sowie Qualit\u00e4tsziele f\u00fcr die Architektur und relevante Stakeholder und deren Erwartungshaltung. Aufgabenstellung {#_aufgabenstellung} Inhalt. Kurzbeschreibung der fachlichen Aufgabenstellung, treibenden Kr\u00e4fte, Extrakt (oder Abstract) der Anforderungen. Verweis auf (hoffentlich vorliegende) Anforderungsdokumente (mit Versionsbezeichnungen und Ablageorten). Motivation. Aus Sicht der sp\u00e4teren Nutzung ist die Unterst\u00fctzung einer fachlichen Aufgabe oder Verbesserung der Qualit\u00e4t der eigentliche Beweggrund, ein neues System zu schaffen oder ein bestehendes zu modifizieren. Form. Kurze textuelle Beschreibung, eventuell in tabellarischer Use-Case Form. Sofern vorhanden, sollte die Aufgabenstellung Verweise auf die entsprechenden Anforderungsdokumente enthalten. Halten Sie diese Ausz\u00fcge so knapp wie m\u00f6glich und w\u00e4gen Sie Lesbarkeit und Redundanzfreiheit gegeneinander ab. Qualit\u00e4tsziele {#_qualit_tsziele} Inhalt. Die Top-3 bis Top-5 der Qualit\u00e4tsziele f\u00fcr die Architektur, deren Erf\u00fcllung oder Einhaltung den ma\u00dfgeblichen Stakeholdern besonders wichtig sind. Gemeint sind hier wirklich Qualit\u00e4tsziele, die nicht unbedingt mit den Zielen des Projekts \u00fcbereinstimmen. Beachten Sie den Unterschied. Motivation. Weil Qualit\u00e4tsziele grundlegende Architekturentscheidungen oft ma\u00dfgeblich beeinflussen, sollten Sie die f\u00fcr Ihre Stakeholder relevanten Qualit\u00e4tsziele kennen, m\u00f6glichst konkret und operationalisierbar. Form. Tabellarische Darstellung der Qualit\u00e4tsziele mit m\u00f6glichst konkreten Szenarien, geordnet nach Priorit\u00e4ten. Stakeholder {#_stakeholder} Inhalt. Expliziter \u00dcberblick \u00fcber die Stakeholder des Systems -- \u00fcber alle Personen, Rollen oder Organisationen --, die die Architektur kennen sollten oder von der Architektur \u00fcberzeugt werden m\u00fcssen, mit der Architektur oder dem Code arbeiten (z.B. Schnittstellen nutzen), die Dokumentation der Architektur f\u00fcr ihre eigene Arbeit ben\u00f6tigen, Entscheidungen \u00fcber das System und dessen Entwicklung treffen. Motivation. Sie sollten die Projektbeteiligten und -betroffenen kennen, sonst erleben Sie sp\u00e4ter im Entwicklungsprozess \u00dcberraschungen. Diese Stakeholder bestimmen unter anderem Umfang und Detaillierungsgrad der von Ihnen zu leistenden Arbeit und Ergebnisse. Form. Tabelle mit Rollen- oder Personennamen, sowie deren Erwartungshaltung bez\u00fcglich der Architektur und deren Dokumentation. +-----------------+-----------------+-----------------------------------+ | Rolle | Kontakt | Erwartungshaltung | +=================+=================+===================================+ | \\<Rolle-1> | \\<Kontakt-1> | \\<Erwartung-1> | +-----------------+-----------------+-----------------------------------+ | \\<Rolle-2> | \\<Kontakt-2> | \\<Erwartung-2> | +-----------------+-----------------+-----------------------------------+ Randbedingungen {#section-architecture-constraints} Inhalt. Randbedingungen und Vorgaben, die ihre Freiheiten bez\u00fcglich Entwurf, Implementierung oder Ihres Entwicklungsprozesses einschr\u00e4nken. Diese Randbedingungen gelten manchmal organisations- oder firmenweit \u00fcber die Grenzen einzelner Systeme hinweg. Motivation. F\u00fcr eine tragf\u00e4hige Architektur sollten Sie genau wissen, wo Ihre Freiheitsgrade bez\u00fcglich der Entwurfsentscheidungen liegen und wo Sie Randbedingungen beachten m\u00fcssen. Sie k\u00f6nnen Randbedingungen vielleicht noch verhandeln, zun\u00e4chst sind sie aber da. Form. Einfache Tabellen der Randbedingungen mit Erl\u00e4uterungen. Bei Bedarf unterscheiden Sie technische, organisatorische und politische Randbedingungen oder \u00fcbergreifende Konventionen (beispielsweise Programmier- oder Versionierungsrichtlinien, Dokumentations- oder Namenskonvention). Kontextabgrenzung {#section-system-scope-and-context} Inhalt. Die Kontextabgrenzung grenzt das System von allen Kommunikationsbeziehungen (Nachbarsystemen und Benutzerrollen) ab. Sie legt damit die externen Schnittstellen fest. Differenzieren Sie fachliche (fachliche Ein- und Ausgaben) und technische Kontexte (Kan\u00e4le, Protokolle, Hardware), falls n\u00f6tig. Motivation. Die fachlichen und technischen Schnittstellen zur Kommunikation geh\u00f6ren zu den kritischsten Aspekten eines Systems. Stellen Sie sicher, dass Sie diese komplett verstanden haben. Form. Verschiedene Optionen: Diverse Kontextdiagramme Listen von Kommunikationsbeziehungen mit deren Schnittstellen Fachlicher Kontext {#_fachlicher_kontext} Inhalt. Festlegung aller Kommunikationsbeziehungen (Nutzer, IT-Systeme, ...) mit Erkl\u00e4rung der fachlichen Ein- und Ausgabedaten oder Schnittstellen. Zus\u00e4tzlich (bei Bedarf) fachliche Datenformate oder Protokolle der Kommunikation mit den Nachbarsystemen. Motivation. Alle Beteiligten m\u00fcssen verstehen, welche fachlichen Informationen mit der Umwelt ausgetauscht werden. Form. Alle Diagrammarten, die das System als Blackbox darstellen und die fachlichen Schnittstellen zu den Nachbarsystemen beschreiben. Alternativ oder erg\u00e4nzend k\u00f6nnen Sie eine Tabelle verwenden. Der Titel gibt den Namen Ihres Systems wieder; die drei Spalten sind: Kommunikationsbeziehung, Eingabe, Ausgabe. \\<Diagramm und/oder Tabelle> \\<optional: Erl\u00e4uterung der externen fachlichen Schnittstellen> Technischer Kontext {#_technischer_kontext} Inhalt. Technische Schnittstellen (Kan\u00e4le, \u00dcbertragungsmedien) zwischen dem System und seiner Umwelt. Zus\u00e4tzlich eine Erkl\u00e4rung ( mapping ), welche fachlichen Ein- und Ausgaben \u00fcber welche technischen Kan\u00e4le flie\u00dfen. Motivation. Viele Stakeholder treffen Architekturentscheidungen auf Basis der technischen Schnittstellen des Systems zu seinem Kontext. Insbesondere bei der Entwicklung von Infrastruktur oder Hardware sind diese technischen Schnittstellen durchaus entscheidend. Form. Beispielsweise UML Deployment-Diagramme mit den Kan\u00e4len zu Nachbarsystemen, begleitet von einer Tabelle, die Kan\u00e4le auf Ein-/Ausgaben abbildet. \\<Diagramm oder Tabelle> \\<optional: Erl\u00e4uterung der externen technischen Schnittstellen> \\<Mapping fachliche auf technische Schnittstellen> L\u00f6sungsstrategie {#section-solution-strategy} Inhalt. Kurzer \u00dcberblick \u00fcber die grundlegenden Entscheidungen und L\u00f6sungsans\u00e4tze, die Entwurf und Implementierung des Systems pr\u00e4gen. Hierzu geh\u00f6ren: Technologieentscheidungen Entscheidungen \u00fcber die Top-Level-Zerlegung des Systems, beispielsweise die Verwendung gesamthaft pr\u00e4gender Entwurfs- oder Architekturmuster, Entscheidungen zur Erreichung der wichtigsten Qualit\u00e4tsanforderungen sowie relevante organisatorische Entscheidungen, beispielsweise f\u00fcr bestimmte Entwicklungsprozesse oder Delegation bestimmter Aufgaben an andere Stakeholder. Motivation. Diese wichtigen Entscheidungen bilden wesentliche \u201eEckpfeiler\" der Architektur. Von ihnen h\u00e4ngen viele weitere Entscheidungen oder Implementierungsregeln ab. Form. Fassen Sie die zentralen Entwurfsentscheidungen kurz zusammen. Motivieren Sie, ausgehend von Aufgabenstellung, Qualit\u00e4tszielen und Randbedingungen, was Sie entschieden haben und warum Sie so entschieden haben. Vermeiden Sie redundante Beschreibungen und verweisen Sie eher auf weitere Ausf\u00fchrungen in Folgeabschnitten. Bausteinsicht {#section-building-block-view} Inhalt. Diese Sicht zeigt die statische Zerlegung des Systems in Bausteine sowie deren Beziehungen. Beispiele f\u00fcr Bausteine sind unter anderem: Module Komponenten Subsysteme Klassen Interfaces Pakete Bibliotheken Frameworks Schichten Partitionen Tiers Funktionen Makros Operationen Datenstrukturen ... Diese Sicht sollte in jeder Architekturdokumentation vorhanden sein. In der Analogie zum Hausbau bildet die Bausteinsicht den Grundrissplan . Motivation. Behalten Sie den \u00dcberblick \u00fcber den Quellcode, indem Sie die statische Struktur des Systems durch Abstraktion verst\u00e4ndlich machen. Damit erm\u00f6glichen Sie Kommunikation auf abstrakterer Ebene, ohne zu viele Implementierungsdetails offenlegen zu m\u00fcssen. Form. Die Bausteinsicht ist eine hierarchische Sammlung von Blackboxen und Whiteboxen (siehe Abbildung unten) und deren Beschreibungen. Ebene 1 ist die Whitebox-Beschreibung des Gesamtsystems, zusammen mit Blackbox-Beschreibungen der darin enthaltenen Bausteine. Ebene 2 zoomt in einige Bausteine der Ebene 1 hinein. Sie enth\u00e4lt somit die Whitebox-Beschreibungen ausgew\u00e4hlter Bausteine der Ebene 1, jeweils zusammen mit Blackbox-Beschreibungen darin enthaltener Bausteine. Ebene 3 zoomt in einige Bausteine der Ebene 2 hinein, usw. Whitebox Gesamtsystem {#_whitebox_gesamtsystem} An dieser Stelle beschreiben Sie die Zerlegung des Gesamtsystems anhand des nachfolgenden Whitebox-Templates. Dieses enth\u00e4lt: Ein \u00dcbersichtsdiagramm die Begr\u00fcndung dieser Zerlegung Blackbox-Beschreibungen der hier enthaltenen Bausteine. Daf\u00fcr haben Sie verschiedene Optionen: in einer Tabelle, gibt einen kurzen und pragmatischen \u00dcberblick \u00fcber die enthaltenen Bausteine sowie deren Schnittstellen. als Liste von Blackbox-Beschreibungen der Bausteine, gem\u00e4\u00df dem Blackbox-Template (siehe unten). Diese Liste k\u00f6nnen Sie, je nach Werkzeug, etwa in Form von Unterkapiteln (Text), Unter-Seiten (Wiki) oder geschachtelten Elementen (Modellierungswerkzeug) darstellen. (optional:) wichtige Schnittstellen, die nicht bereits im Blackbox-Template eines der Bausteine erl\u00e4utert werden, aber f\u00fcr das Verst\u00e4ndnis der Whitebox von zentraler Bedeutung sind. Aufgrund der vielf\u00e4ltigen M\u00f6glichkeiten oder Auspr\u00e4gungen von Schnittstellen geben wir hierzu kein weiteres Template vor. Im schlimmsten Fall m\u00fcssen Sie Syntax, Semantik, Protokolle, Fehlerverhalten, Restriktionen, Versionen, Qualit\u00e4tseigenschaften, notwendige Kompatibilit\u00e4ten und vieles mehr spezifizieren oder beschreiben. Im besten Fall kommen Sie mit Beispielen oder einfachen Signaturen zurecht. \\<\u00dcbersichtsdiagramm> Begr\u00fcndung : \\<Erl\u00e4uternder Text> Enthaltene Bausteine : \\<Beschreibung der enthaltenen Bausteine (Blackboxen)> Wichtige Schnittstellen : \\<Beschreibung wichtiger Schnittstellen> Hier folgen jetzt Erl\u00e4uterungen zu Blackboxen der Ebene 1. Falls Sie die tabellarische Beschreibung w\u00e4hlen, so werden Blackboxen darin nur mit Name und Verantwortung nach folgendem Muster beschrieben: +-----------------------+-----------------------------------------------+ | Name | Verantwortung | +=======================+===============================================+ | \\<Blackbox 1> | \\<Text> | +-----------------------+-----------------------------------------------+ | \\<Blackbox 2> | \\<Text> | +-----------------------+-----------------------------------------------+ Falls Sie die ausf\u00fchrliche Liste von Blackbox-Beschreibungen w\u00e4hlen, beschreiben Sie jede wichtige Blackbox in einem eigenen Blackbox-Template. Dessen \u00dcberschrift ist jeweils der Namen dieser Blackbox. \\<Name Blackbox 1> {#__name_blackbox_1} Beschreiben Sie die \\<Blackbox 1> anhand des folgenden Blackbox-Templates: Zweck/Verantwortung Schnittstelle(n), sofern diese nicht als eigenst\u00e4ndige Beschreibungen herausgezogen sind. Hierzu geh\u00f6ren eventuell auch Qualit\u00e4ts- und Leistungsmerkmale dieser Schnittstelle. (Optional) Qualit\u00e4ts-/Leistungsmerkmale der Blackbox, beispielsweise Verf\u00fcgbarkeit, Laufzeitverhalten o. \u00c4. (Optional) Ablageort/Datei(en) (Optional) Erf\u00fcllte Anforderungen, falls Sie Traceability zu Anforderungen ben\u00f6tigen. (Optional) Offene Punkte/Probleme/Risiken \\<Zweck/Verantwortung> \\<Schnittstelle(n)> \\<(Optional) Qualit\u00e4ts-/Leistungsmerkmale> \\<(Optional) Ablageort/Datei(en)> \\<(Optional) Erf\u00fcllte Anforderungen> \\<(optional) Offene Punkte/Probleme/Risiken> \\<Name Blackbox 2> {#__name_blackbox_2} \\<Blackbox-Template> \\<Name Blackbox n> {#__name_blackbox_n} \\<Blackbox-Template> \\<Name Schnittstelle 1> {#__name_schnittstelle_1} ... \\<Name Schnittstelle m> {#__name_schnittstelle_m} Ebene 2 {#_ebene_2} Beschreiben Sie den inneren Aufbau (einiger) Bausteine aus Ebene 1 als Whitebox. Welche Bausteine Ihres Systems Sie hier beschreiben, m\u00fcssen Sie selbst entscheiden. Bitte stellen Sie dabei Relevanz vor Vollst\u00e4ndigkeit. Skizzieren Sie wichtige, \u00fcberraschende, riskante, komplexe oder besonders volatile Bausteine. Normale, einfache oder standardisierte Teile sollten Sie weglassen. Whitebox \\<Baustein 1> {#_whitebox_emphasis_baustein_1_emphasis} ...zeigt das Innenleben von Baustein 1 . \\<Whitebox-Template> Whitebox \\<Baustein 2> {#_whitebox_emphasis_baustein_2_emphasis} \\<Whitebox-Template> ... Whitebox \\<Baustein m> {#_whitebox_emphasis_baustein_m_emphasis} \\<Whitebox-Template> Ebene 3 {#_ebene_3} Beschreiben Sie den inneren Aufbau (einiger) Bausteine aus Ebene 2 als Whitebox. Bei tieferen Gliederungen der Architektur kopieren Sie diesen Teil von arc42 f\u00fcr die weiteren Ebenen. Whitebox \\<_Baustein x.1_> {#_whitebox_baustein_x_1} ...zeigt das Innenleben von Baustein x.1 . \\<Whitebox-Template> Whitebox \\<_Baustein x.2_> {#_whitebox_baustein_x_2} \\<Whitebox-Template> Whitebox \\<_Baustein y.1_> {#_whitebox_baustein_y_1} \\<Whitebox-Template> Laufzeitsicht {#section-runtime-view} Inhalt. Diese Sicht erkl\u00e4rt konkrete Abl\u00e4ufe und Beziehungen zwischen Bausteinen in Form von Szenarien aus den folgenden Bereichen: Wichtige Abl\u00e4ufe oder Features : Wie f\u00fchren die Bausteine der Architektur die wichtigsten Abl\u00e4ufe durch? Interaktionen an kritischen externen Schnittstellen: Wie arbeiten Bausteine mit Nutzern und Nachbarsystemen zusammen? Betrieb und Administration: Inbetriebnahme, Start, Stop. Fehler- und Ausnahmeszenarien Anmerkung: Das Kriterium f\u00fcr die Auswahl der m\u00f6glichen Szenarien (d.h. Abl\u00e4ufe) des Systems ist deren Architekturrelevanz. Es geht nicht darum, m\u00f6glichst viele Abl\u00e4ufe darzustellen, sondern eine angemessene Auswahl zu dokumentieren. Motivation. Sie sollten verstehen, wie (Instanzen von) Bausteine(n) Ihres Systems ihre jeweiligen Aufgaben erf\u00fcllen und zur Laufzeit miteinander kommunizieren. Nutzen Sie diese Szenarien in der Dokumentation haupts\u00e4chlich f\u00fcr eine verst\u00e4ndlichere Kommunikation mit denjenigen Stakeholdern, die die statischen Modelle (z.B. Bausteinsicht, Verteilungssicht) weniger verst\u00e4ndlich finden. Form. F\u00fcr die Beschreibung von Szenarien gibt es zahlreiche Ausdrucksm\u00f6glichkeiten. Nutzen Sie beispielsweise: Nummerierte Schrittfolgen oder Aufz\u00e4hlungen in Umgangssprache Aktivit\u00e4ts- oder Flussdiagramme Sequenzdiagramme BPMN (Gesch\u00e4ftsprozessmodell und -notation) oder EPKs (Ereignis-Prozessketten) Zustandsautomaten ... \\<Bezeichnung Laufzeitszenario 1> {#__emphasis_bezeichnung_laufzeitszenario_1_emphasis} \\<hier Laufzeitdiagramm oder Ablaufbeschreibung einf\u00fcgen> \\<hier Besonderheiten bei dem Zusammenspiel der Bausteine in diesem Szenario erl\u00e4utern> \\<Bezeichnung Laufzeitszenario 2> {#__emphasis_bezeichnung_laufzeitszenario_2_emphasis} ... \\<Bezeichnung Laufzeitszenario n> {#__emphasis_bezeichnung_laufzeitszenario_n_emphasis} ... Verteilungssicht {#section-deployment-view} Inhalt. Die Verteilungssicht beschreibt: die technische Infrastruktur, auf der Ihr System ausgef\u00fchrt wird, mit Infrastrukturelementen wie Standorten, Umgebungen, Rechnern, Prozessoren, Kan\u00e4len und Netztopologien sowie sonstigen Bestandteilen, und die Abbildung von (Software-)Bausteinen auf diese Infrastruktur. H\u00e4ufig laufen Systeme in unterschiedlichen Umgebungen, beispielsweise Entwicklung-/Test- oder Produktionsumgebungen. In solchen F\u00e4llen sollten Sie alle relevanten Umgebungen aufzeigen. Nutzen Sie die Verteilungssicht insbesondere dann, wenn Ihre Software auf mehr als einem Rechner, Prozessor, Server oder Container abl\u00e4uft oder Sie Ihre Hardware sogar selbst konstruieren. Aus Softwaresicht gen\u00fcgt es, auf die Aspekte zu achten, die f\u00fcr die Softwareverteilung relevant sind. Insbesondere bei der Hardwareentwicklung kann es notwendig sein, die Infrastruktur mit beliebigen Details zu beschreiben. Motivation. Software l\u00e4uft nicht ohne Infrastruktur. Diese zugrundeliegende Infrastruktur beeinflusst Ihr System und/oder querschnittliche L\u00f6sungskonzepte, daher m\u00fcssen Sie diese Infrastruktur kennen. Form. Das oberste Verteilungsdiagramm k\u00f6nnte bereits in Ihrem technischen Kontext enthalten sein, mit Ihrer Infrastruktur als EINE Blackbox. Jetzt zoomen Sie in diese Infrastruktur mit weiteren Verteilungsdiagrammen hinein: Die UML stellt mit Verteilungsdiagrammen (Deployment diagrams) eine Diagrammart zur Verf\u00fcgung, um diese Sicht auszudr\u00fccken. Nutzen Sie diese, evtl. auch geschachtelt, wenn Ihre Verteilungsstruktur es verlangt. Falls Ihre Infrastruktur-Stakeholder andere Diagrammarten bevorzugen, die beispielsweise Prozessoren und Kan\u00e4le zeigen, sind diese hier ebenfalls einsetzbar. Infrastruktur Ebene 1 {#_infrastruktur_ebene_1} An dieser Stelle beschreiben Sie (als Kombination von Diagrammen mit Tabellen oder Texten): die Verteilung des Gesamtsystems auf mehrere Standorte, Umgebungen, Rechner, Prozessoren o. \u00c4., sowie die physischen Verbindungskan\u00e4le zwischen diesen, wichtige Begr\u00fcndungen f\u00fcr diese Verteilungsstruktur, Qualit\u00e4ts- und/oder Leistungsmerkmale dieser Infrastruktur, Zuordnung von Softwareartefakten zu Bestandteilen der Infrastruktur F\u00fcr mehrere Umgebungen oder alternative Deployments kopieren Sie diesen Teil von arc42 f\u00fcr alle wichtigen Umgebungen/Varianten. \\<\u00dcbersichtsdiagramm> Begr\u00fcndung : \\<Erl\u00e4uternder Text> Qualit\u00e4ts- und/oder Leistungsmerkmale : \\<Erl\u00e4uternder Text> Zuordnung von Bausteinen zu Infrastruktur : \\<Beschreibung der Zuordnung> Infrastruktur Ebene 2 {#_infrastruktur_ebene_2} An dieser Stelle k\u00f6nnen Sie den inneren Aufbau (einiger) Infrastrukturelemente aus Ebene 1 beschreiben. F\u00fcr jedes Infrastrukturelement kopieren Sie die Struktur aus Ebene 1. \\<Infrastrukturelement 1> {#__emphasis_infrastrukturelement_1_emphasis} \\<Diagramm + Erl\u00e4uterungen> \\<Infrastrukturelement 2> {#__emphasis_infrastrukturelement_2_emphasis} \\<Diagramm + Erl\u00e4uterungen> ... \\<Infrastrukturelement n> {#__emphasis_infrastrukturelement_n_emphasis} \\<Diagramm + Erl\u00e4uterungen> Querschnittliche Konzepte {#section-concepts} Inhalt. Dieser Abschnitt beschreibt \u00fcbergreifende, prinzipielle Regelungen und L\u00f6sungsans\u00e4tze, die an mehreren Stellen (= querschittlich ) relevant sind. Solche Konzepte betreffen oft mehrere Bausteine. Dazu k\u00f6nnen vielerlei Themen geh\u00f6ren, beispielsweise: fachliche Modelle, eingesetzte Architektur- oder Entwurfsmuster, Regeln f\u00fcr den konkreten Einsatz von Technologien, prinzipielle\u2009---\u2009meist technische\u2009---\u2009Festlegungen \u00fcbergreifender Art, Implementierungsregeln Motivation. Konzepte bilden die Grundlage f\u00fcr konzeptionelle Integrit\u00e4t (Konsistenz, Homogenit\u00e4t) der Architektur und damit eine wesentliche Grundlage f\u00fcr die innere Qualit\u00e4t Ihrer Systeme. Manche dieser Themen lassen sich nur schwer als Baustein in der Architektur unterbringen (z.B. das Thema \u201eSicherheit\"). Hier ist der Platz im Template, wo Sie derartige Themen geschlossen behandeln k\u00f6nnen. Form. Kann vielf\u00e4ltig sein: Konzeptpapiere mit beliebiger Gliederung, \u00fcbergreifende Modelle/Szenarien mit Notationen, die Sie auch in den Architektursichten nutzen, beispielhafte Implementierung speziell f\u00fcr technische Konzepte, Verweise auf \u201e\u00fcbliche\" Nutzung von Standard-Frameworks (beispielsweise die Nutzung von Hibernate als Object/Relational Mapper). Struktur. Eine m\u00f6gliche (nicht aber notwendige!) Untergliederung dieses Abschnittes k\u00f6nnte wie folgt aussehen (wobei die Zuordnung von Themen zu den Gruppen nicht immer eindeutig ist): Fachliche Konzepte User Experience (UX) Sicherheitskonzepte (Safety und Security) Architektur- und Entwurfsmuster Unter-der-Haube Entwicklungskonzepte Betriebskonzepte \\<Konzept 1> {#__emphasis_konzept_1_emphasis} \\<Erkl\u00e4rung> \\<Konzept 2> {#__emphasis_konzept_2_emphasis} \\<Erkl\u00e4rung> ... \\<Konzept n> {#__emphasis_konzept_n_emphasis} \\<Erkl\u00e4rung> Entwurfsentscheidungen {#section-design-decisions} Inhalt. Wichtige, teure, gro\u00dfe oder riskante Architektur- oder Entwurfsentscheidungen inklusive der jeweiligen Begr\u00fcndungen. Mit \\\"Entscheidungen\\\" meinen wir hier die Auswahl einer von mehreren Alternativen unter vorgegebenen Kriterien. W\u00e4gen Sie ab, inwiefern Sie Entscheidungen hier zentral beschreiben, oder wo eine lokale Beschreibung (z.B. in der Whitebox-Sicht von Bausteinen) sinnvoller ist. Vermeiden Sie Redundanz. Verweisen Sie evtl. auf Abschnitt 4, wo schon grundlegende strategische Entscheidungen beschrieben wurden. Motivation. Stakeholder des Systems sollten wichtige Entscheidungen verstehen und nachvollziehen k\u00f6nnen. Form. Verschiedene M\u00f6glichkeiten: Liste oder Tabelle, nach Wichtigkeit und Tragweite der Entscheidungen geordnet ausf\u00fchrlicher in Form einzelner Unterkapitel je Entscheidung ADR ( Architecture Decision Record ) f\u00fcr jede wichtige Entscheidung Qualit\u00e4tsanforderungen {#section-quality-scenarios} Inhalt. Dieser Abschnitt enth\u00e4lt m\u00f6glichst alle Qualit\u00e4tsanforderungen als Qualit\u00e4tsbaum mit Szenarien. Die wichtigsten davon haben Sie bereits in Abschnitt 1.2 (Qualit\u00e4tsziele) hervorgehoben. Nehmen Sie hier auch Qualit\u00e4tsanforderungen geringerer Priorit\u00e4t auf, deren Nichteinhaltung oder -erreichung geringe Risiken birgt. Motivation. Weil Qualit\u00e4tsanforderungen die Architekturentscheidungen oft ma\u00dfgeblich beeinflussen, sollten Sie die f\u00fcr Ihre Stakeholder relevanten Qualit\u00e4tsanforderungen kennen, m\u00f6glichst konkret und operationalisiert. Qualit\u00e4tsbaum {#_qualit_tsbaum} Inhalt. Der Qualit\u00e4tsbaum (\u00e0 la ATAM) mit Qualit\u00e4tsszenarien an den Bl\u00e4ttern. Motivation. Die mit Priorit\u00e4ten versehene Baumstruktur gibt \u00dcberblick \u00fcber die\u2009---\u2009oftmals zahlreichen\u2009---\u2009Qualit\u00e4tsanforderungen. Baumartige Verfeinerung des Begriffes \u201eQualit\u00e4t\", mit \u201eQualit\u00e4t\" oder \u201eN\u00fctzlichkeit\" als Wurzel. Mindmap mit Qualit\u00e4tsoberbegriffen als Hauptzweige In jedem Fall sollten Sie hier Verweise auf die Qualit\u00e4tsszenarien des folgenden Abschnittes aufnehmen. Qualit\u00e4tsszenarien {#_qualit_tsszenarien} Inhalt. Konkretisierung der (in der Praxis oftmals vagen oder impliziten) Qualit\u00e4tsanforderungen durch (Qualit\u00e4ts-)Szenarien. Diese Szenarien beschreiben, was beim Eintreffen eines Stimulus auf ein System in bestimmten Situationen geschieht. Wesentlich sind zwei Arten von Szenarien: Nutzungsszenarien (auch bekannt als Anwendungs- oder Anwendungsfallszenarien) beschreiben, wie das System zur Laufzeit auf einen bestimmten Ausl\u00f6ser reagieren soll. Hierunter fallen auch Szenarien zur Beschreibung von Effizienz oder Performance. Beispiel: Das System beantwortet eine Benutzeranfrage innerhalb einer Sekunde. \u00c4nderungsszenarien beschreiben eine Modifikation des Systems oder seiner unmittelbaren Umgebung. Beispiel: Eine zus\u00e4tzliche Funktionalit\u00e4t wird implementiert oder die Anforderung an ein Qualit\u00e4tsmerkmal \u00e4ndert sich. Motivation. Szenarien operationalisieren Qualit\u00e4tsanforderungen und machen deren Erf\u00fcllung mess- oder entscheidbar. Insbesondere wenn Sie die Qualit\u00e4t Ihrer Architektur mit Methoden wie ATAM \u00fcberpr\u00fcfen wollen, bed\u00fcrfen die in Abschnitt 1.2 genannten Qualit\u00e4tsziele einer weiteren Pr\u00e4zisierung bis auf die Ebene von diskutierbaren und nachpr\u00fcfbaren Szenarien. Form. Entweder tabellarisch oder als Freitext. Risiken und technische Schulden {#section-technical-risks} Inhalt. Eine nach Priorit\u00e4ten geordnete Liste der erkannten Architekturrisiken und/oder technischen Schulden. Risikomanagement ist Projektmanagement f\u00fcr Erwachsene. --- Tim Lister Atlantic Systems Guild Unter diesem Motto sollten Sie Architekturrisiken und/oder technische Schulden gezielt ermitteln, bewerten und Ihren Management-Stakeholdern (z.B. Projektleitung, Product-Owner) transparent machen. Form. Liste oder Tabelle von Risiken und/oder technischen Schulden, eventuell mit vorgeschlagenen Ma\u00dfnahmen zur Risikovermeidung, Risikominimierung oder dem Abbau der technischen Schulden. Glossar {#section-glossary} Inhalt. Die wesentlichen fachlichen und technischen Begriffe, die Stakeholder im Zusammenhang mit dem System verwenden. Nutzen Sie das Glossar ebenfalls als \u00dcbersetzungsreferenz, falls Sie in mehrsprachigen Teams arbeiten. Motivation. Sie sollten relevante Begriffe klar definieren, so dass alle Beteiligten diese Begriffe identisch verstehen, und vermeiden, mehrere Begriffe f\u00fcr die gleiche Sache zu haben. Zweispaltige Tabelle mit \\<Begriff> und \\<Definition> Eventuell weitere Spalten mit \u00dcbersetzungen, falls notwendig. +-----------------------+-----------------------------------------------+ | Begriff | Definition | +=======================+===============================================+ | \\<Begriff-1> | \\<Definition-1> | +-----------------------+-----------------------------------------------+ | \\<Begriff-2 | \\<Definition-2> | +-----------------------+-----------------------------------------------+","title":"Arc42 template"},{"location":"arc42-template/#einfuhrung-und-ziele-section-introduction-and-goals","text":"Beschreibt die wesentlichen Anforderungen und treibenden Kr\u00e4fte, die bei der Umsetzung der Softwarearchitektur und Entwicklung des Systems ber\u00fccksichtigt werden m\u00fcssen. Dazu geh\u00f6ren: zugrunde liegende Gesch\u00e4ftsziele, wesentliche Aufgabenstellungen und essenzielle fachliche Anforderungen an das System sowie Qualit\u00e4tsziele f\u00fcr die Architektur und relevante Stakeholder und deren Erwartungshaltung.","title":"Einf\u00fchrung und Ziele {#section-introduction-and-goals}"},{"location":"arc42-template/#aufgabenstellung-_aufgabenstellung","text":"Inhalt. Kurzbeschreibung der fachlichen Aufgabenstellung, treibenden Kr\u00e4fte, Extrakt (oder Abstract) der Anforderungen. Verweis auf (hoffentlich vorliegende) Anforderungsdokumente (mit Versionsbezeichnungen und Ablageorten). Motivation. Aus Sicht der sp\u00e4teren Nutzung ist die Unterst\u00fctzung einer fachlichen Aufgabe oder Verbesserung der Qualit\u00e4t der eigentliche Beweggrund, ein neues System zu schaffen oder ein bestehendes zu modifizieren. Form. Kurze textuelle Beschreibung, eventuell in tabellarischer Use-Case Form. Sofern vorhanden, sollte die Aufgabenstellung Verweise auf die entsprechenden Anforderungsdokumente enthalten. Halten Sie diese Ausz\u00fcge so knapp wie m\u00f6glich und w\u00e4gen Sie Lesbarkeit und Redundanzfreiheit gegeneinander ab.","title":"Aufgabenstellung {#_aufgabenstellung}"},{"location":"arc42-template/#qualitatsziele-_qualit_tsziele","text":"Inhalt. Die Top-3 bis Top-5 der Qualit\u00e4tsziele f\u00fcr die Architektur, deren Erf\u00fcllung oder Einhaltung den ma\u00dfgeblichen Stakeholdern besonders wichtig sind. Gemeint sind hier wirklich Qualit\u00e4tsziele, die nicht unbedingt mit den Zielen des Projekts \u00fcbereinstimmen. Beachten Sie den Unterschied. Motivation. Weil Qualit\u00e4tsziele grundlegende Architekturentscheidungen oft ma\u00dfgeblich beeinflussen, sollten Sie die f\u00fcr Ihre Stakeholder relevanten Qualit\u00e4tsziele kennen, m\u00f6glichst konkret und operationalisierbar. Form. Tabellarische Darstellung der Qualit\u00e4tsziele mit m\u00f6glichst konkreten Szenarien, geordnet nach Priorit\u00e4ten.","title":"Qualit\u00e4tsziele {#_qualit_tsziele}"},{"location":"arc42-template/#stakeholder-_stakeholder","text":"Inhalt. Expliziter \u00dcberblick \u00fcber die Stakeholder des Systems -- \u00fcber alle Personen, Rollen oder Organisationen --, die die Architektur kennen sollten oder von der Architektur \u00fcberzeugt werden m\u00fcssen, mit der Architektur oder dem Code arbeiten (z.B. Schnittstellen nutzen), die Dokumentation der Architektur f\u00fcr ihre eigene Arbeit ben\u00f6tigen, Entscheidungen \u00fcber das System und dessen Entwicklung treffen. Motivation. Sie sollten die Projektbeteiligten und -betroffenen kennen, sonst erleben Sie sp\u00e4ter im Entwicklungsprozess \u00dcberraschungen. Diese Stakeholder bestimmen unter anderem Umfang und Detaillierungsgrad der von Ihnen zu leistenden Arbeit und Ergebnisse. Form. Tabelle mit Rollen- oder Personennamen, sowie deren Erwartungshaltung bez\u00fcglich der Architektur und deren Dokumentation. +-----------------+-----------------+-----------------------------------+ | Rolle | Kontakt | Erwartungshaltung | +=================+=================+===================================+ | \\<Rolle-1> | \\<Kontakt-1> | \\<Erwartung-1> | +-----------------+-----------------+-----------------------------------+ | \\<Rolle-2> | \\<Kontakt-2> | \\<Erwartung-2> | +-----------------+-----------------+-----------------------------------+","title":"Stakeholder {#_stakeholder}"},{"location":"arc42-template/#randbedingungen-section-architecture-constraints","text":"Inhalt. Randbedingungen und Vorgaben, die ihre Freiheiten bez\u00fcglich Entwurf, Implementierung oder Ihres Entwicklungsprozesses einschr\u00e4nken. Diese Randbedingungen gelten manchmal organisations- oder firmenweit \u00fcber die Grenzen einzelner Systeme hinweg. Motivation. F\u00fcr eine tragf\u00e4hige Architektur sollten Sie genau wissen, wo Ihre Freiheitsgrade bez\u00fcglich der Entwurfsentscheidungen liegen und wo Sie Randbedingungen beachten m\u00fcssen. Sie k\u00f6nnen Randbedingungen vielleicht noch verhandeln, zun\u00e4chst sind sie aber da. Form. Einfache Tabellen der Randbedingungen mit Erl\u00e4uterungen. Bei Bedarf unterscheiden Sie technische, organisatorische und politische Randbedingungen oder \u00fcbergreifende Konventionen (beispielsweise Programmier- oder Versionierungsrichtlinien, Dokumentations- oder Namenskonvention).","title":"Randbedingungen {#section-architecture-constraints}"},{"location":"arc42-template/#kontextabgrenzung-section-system-scope-and-context","text":"Inhalt. Die Kontextabgrenzung grenzt das System von allen Kommunikationsbeziehungen (Nachbarsystemen und Benutzerrollen) ab. Sie legt damit die externen Schnittstellen fest. Differenzieren Sie fachliche (fachliche Ein- und Ausgaben) und technische Kontexte (Kan\u00e4le, Protokolle, Hardware), falls n\u00f6tig. Motivation. Die fachlichen und technischen Schnittstellen zur Kommunikation geh\u00f6ren zu den kritischsten Aspekten eines Systems. Stellen Sie sicher, dass Sie diese komplett verstanden haben. Form. Verschiedene Optionen: Diverse Kontextdiagramme Listen von Kommunikationsbeziehungen mit deren Schnittstellen","title":"Kontextabgrenzung {#section-system-scope-and-context}"},{"location":"arc42-template/#fachlicher-kontext-_fachlicher_kontext","text":"Inhalt. Festlegung aller Kommunikationsbeziehungen (Nutzer, IT-Systeme, ...) mit Erkl\u00e4rung der fachlichen Ein- und Ausgabedaten oder Schnittstellen. Zus\u00e4tzlich (bei Bedarf) fachliche Datenformate oder Protokolle der Kommunikation mit den Nachbarsystemen. Motivation. Alle Beteiligten m\u00fcssen verstehen, welche fachlichen Informationen mit der Umwelt ausgetauscht werden. Form. Alle Diagrammarten, die das System als Blackbox darstellen und die fachlichen Schnittstellen zu den Nachbarsystemen beschreiben. Alternativ oder erg\u00e4nzend k\u00f6nnen Sie eine Tabelle verwenden. Der Titel gibt den Namen Ihres Systems wieder; die drei Spalten sind: Kommunikationsbeziehung, Eingabe, Ausgabe. \\<Diagramm und/oder Tabelle> \\<optional: Erl\u00e4uterung der externen fachlichen Schnittstellen>","title":"Fachlicher Kontext {#_fachlicher_kontext}"},{"location":"arc42-template/#technischer-kontext-_technischer_kontext","text":"Inhalt. Technische Schnittstellen (Kan\u00e4le, \u00dcbertragungsmedien) zwischen dem System und seiner Umwelt. Zus\u00e4tzlich eine Erkl\u00e4rung ( mapping ), welche fachlichen Ein- und Ausgaben \u00fcber welche technischen Kan\u00e4le flie\u00dfen. Motivation. Viele Stakeholder treffen Architekturentscheidungen auf Basis der technischen Schnittstellen des Systems zu seinem Kontext. Insbesondere bei der Entwicklung von Infrastruktur oder Hardware sind diese technischen Schnittstellen durchaus entscheidend. Form. Beispielsweise UML Deployment-Diagramme mit den Kan\u00e4len zu Nachbarsystemen, begleitet von einer Tabelle, die Kan\u00e4le auf Ein-/Ausgaben abbildet. \\<Diagramm oder Tabelle> \\<optional: Erl\u00e4uterung der externen technischen Schnittstellen> \\<Mapping fachliche auf technische Schnittstellen>","title":"Technischer Kontext {#_technischer_kontext}"},{"location":"arc42-template/#losungsstrategie-section-solution-strategy","text":"Inhalt. Kurzer \u00dcberblick \u00fcber die grundlegenden Entscheidungen und L\u00f6sungsans\u00e4tze, die Entwurf und Implementierung des Systems pr\u00e4gen. Hierzu geh\u00f6ren: Technologieentscheidungen Entscheidungen \u00fcber die Top-Level-Zerlegung des Systems, beispielsweise die Verwendung gesamthaft pr\u00e4gender Entwurfs- oder Architekturmuster, Entscheidungen zur Erreichung der wichtigsten Qualit\u00e4tsanforderungen sowie relevante organisatorische Entscheidungen, beispielsweise f\u00fcr bestimmte Entwicklungsprozesse oder Delegation bestimmter Aufgaben an andere Stakeholder. Motivation. Diese wichtigen Entscheidungen bilden wesentliche \u201eEckpfeiler\" der Architektur. Von ihnen h\u00e4ngen viele weitere Entscheidungen oder Implementierungsregeln ab. Form. Fassen Sie die zentralen Entwurfsentscheidungen kurz zusammen. Motivieren Sie, ausgehend von Aufgabenstellung, Qualit\u00e4tszielen und Randbedingungen, was Sie entschieden haben und warum Sie so entschieden haben. Vermeiden Sie redundante Beschreibungen und verweisen Sie eher auf weitere Ausf\u00fchrungen in Folgeabschnitten.","title":"L\u00f6sungsstrategie {#section-solution-strategy}"},{"location":"arc42-template/#bausteinsicht-section-building-block-view","text":"Inhalt. Diese Sicht zeigt die statische Zerlegung des Systems in Bausteine sowie deren Beziehungen. Beispiele f\u00fcr Bausteine sind unter anderem: Module Komponenten Subsysteme Klassen Interfaces Pakete Bibliotheken Frameworks Schichten Partitionen Tiers Funktionen Makros Operationen Datenstrukturen ... Diese Sicht sollte in jeder Architekturdokumentation vorhanden sein. In der Analogie zum Hausbau bildet die Bausteinsicht den Grundrissplan . Motivation. Behalten Sie den \u00dcberblick \u00fcber den Quellcode, indem Sie die statische Struktur des Systems durch Abstraktion verst\u00e4ndlich machen. Damit erm\u00f6glichen Sie Kommunikation auf abstrakterer Ebene, ohne zu viele Implementierungsdetails offenlegen zu m\u00fcssen. Form. Die Bausteinsicht ist eine hierarchische Sammlung von Blackboxen und Whiteboxen (siehe Abbildung unten) und deren Beschreibungen. Ebene 1 ist die Whitebox-Beschreibung des Gesamtsystems, zusammen mit Blackbox-Beschreibungen der darin enthaltenen Bausteine. Ebene 2 zoomt in einige Bausteine der Ebene 1 hinein. Sie enth\u00e4lt somit die Whitebox-Beschreibungen ausgew\u00e4hlter Bausteine der Ebene 1, jeweils zusammen mit Blackbox-Beschreibungen darin enthaltener Bausteine. Ebene 3 zoomt in einige Bausteine der Ebene 2 hinein, usw.","title":"Bausteinsicht {#section-building-block-view}"},{"location":"arc42-template/#whitebox-gesamtsystem-_whitebox_gesamtsystem","text":"An dieser Stelle beschreiben Sie die Zerlegung des Gesamtsystems anhand des nachfolgenden Whitebox-Templates. Dieses enth\u00e4lt: Ein \u00dcbersichtsdiagramm die Begr\u00fcndung dieser Zerlegung Blackbox-Beschreibungen der hier enthaltenen Bausteine. Daf\u00fcr haben Sie verschiedene Optionen: in einer Tabelle, gibt einen kurzen und pragmatischen \u00dcberblick \u00fcber die enthaltenen Bausteine sowie deren Schnittstellen. als Liste von Blackbox-Beschreibungen der Bausteine, gem\u00e4\u00df dem Blackbox-Template (siehe unten). Diese Liste k\u00f6nnen Sie, je nach Werkzeug, etwa in Form von Unterkapiteln (Text), Unter-Seiten (Wiki) oder geschachtelten Elementen (Modellierungswerkzeug) darstellen. (optional:) wichtige Schnittstellen, die nicht bereits im Blackbox-Template eines der Bausteine erl\u00e4utert werden, aber f\u00fcr das Verst\u00e4ndnis der Whitebox von zentraler Bedeutung sind. Aufgrund der vielf\u00e4ltigen M\u00f6glichkeiten oder Auspr\u00e4gungen von Schnittstellen geben wir hierzu kein weiteres Template vor. Im schlimmsten Fall m\u00fcssen Sie Syntax, Semantik, Protokolle, Fehlerverhalten, Restriktionen, Versionen, Qualit\u00e4tseigenschaften, notwendige Kompatibilit\u00e4ten und vieles mehr spezifizieren oder beschreiben. Im besten Fall kommen Sie mit Beispielen oder einfachen Signaturen zurecht. \\<\u00dcbersichtsdiagramm> Begr\u00fcndung : \\<Erl\u00e4uternder Text> Enthaltene Bausteine : \\<Beschreibung der enthaltenen Bausteine (Blackboxen)> Wichtige Schnittstellen : \\<Beschreibung wichtiger Schnittstellen> Hier folgen jetzt Erl\u00e4uterungen zu Blackboxen der Ebene 1. Falls Sie die tabellarische Beschreibung w\u00e4hlen, so werden Blackboxen darin nur mit Name und Verantwortung nach folgendem Muster beschrieben: +-----------------------+-----------------------------------------------+ | Name | Verantwortung | +=======================+===============================================+ | \\<Blackbox 1> | \\<Text> | +-----------------------+-----------------------------------------------+ | \\<Blackbox 2> | \\<Text> | +-----------------------+-----------------------------------------------+ Falls Sie die ausf\u00fchrliche Liste von Blackbox-Beschreibungen w\u00e4hlen, beschreiben Sie jede wichtige Blackbox in einem eigenen Blackbox-Template. Dessen \u00dcberschrift ist jeweils der Namen dieser Blackbox.","title":"Whitebox Gesamtsystem {#_whitebox_gesamtsystem}"},{"location":"arc42-template/#name-blackbox-1-__name_blackbox_1","text":"Beschreiben Sie die \\<Blackbox 1> anhand des folgenden Blackbox-Templates: Zweck/Verantwortung Schnittstelle(n), sofern diese nicht als eigenst\u00e4ndige Beschreibungen herausgezogen sind. Hierzu geh\u00f6ren eventuell auch Qualit\u00e4ts- und Leistungsmerkmale dieser Schnittstelle. (Optional) Qualit\u00e4ts-/Leistungsmerkmale der Blackbox, beispielsweise Verf\u00fcgbarkeit, Laufzeitverhalten o. \u00c4. (Optional) Ablageort/Datei(en) (Optional) Erf\u00fcllte Anforderungen, falls Sie Traceability zu Anforderungen ben\u00f6tigen. (Optional) Offene Punkte/Probleme/Risiken \\<Zweck/Verantwortung> \\<Schnittstelle(n)> \\<(Optional) Qualit\u00e4ts-/Leistungsmerkmale> \\<(Optional) Ablageort/Datei(en)> \\<(Optional) Erf\u00fcllte Anforderungen> \\<(optional) Offene Punkte/Probleme/Risiken>","title":"\\&lt;Name Blackbox 1> {#__name_blackbox_1}"},{"location":"arc42-template/#name-blackbox-2-__name_blackbox_2","text":"\\<Blackbox-Template>","title":"\\&lt;Name Blackbox 2> {#__name_blackbox_2}"},{"location":"arc42-template/#name-blackbox-n-__name_blackbox_n","text":"\\<Blackbox-Template>","title":"\\&lt;Name Blackbox n> {#__name_blackbox_n}"},{"location":"arc42-template/#name-schnittstelle-1-__name_schnittstelle_1","text":"...","title":"\\&lt;Name Schnittstelle 1> {#__name_schnittstelle_1}"},{"location":"arc42-template/#name-schnittstelle-m-__name_schnittstelle_m","text":"","title":"\\&lt;Name Schnittstelle m> {#__name_schnittstelle_m}"},{"location":"arc42-template/#ebene-2-_ebene_2","text":"Beschreiben Sie den inneren Aufbau (einiger) Bausteine aus Ebene 1 als Whitebox. Welche Bausteine Ihres Systems Sie hier beschreiben, m\u00fcssen Sie selbst entscheiden. Bitte stellen Sie dabei Relevanz vor Vollst\u00e4ndigkeit. Skizzieren Sie wichtige, \u00fcberraschende, riskante, komplexe oder besonders volatile Bausteine. Normale, einfache oder standardisierte Teile sollten Sie weglassen.","title":"Ebene 2 {#_ebene_2}"},{"location":"arc42-template/#whitebox-baustein-1-_whitebox_emphasis_baustein_1_emphasis","text":"...zeigt das Innenleben von Baustein 1 . \\<Whitebox-Template>","title":"Whitebox \\&lt;Baustein 1> {#_whitebox_emphasis_baustein_1_emphasis}"},{"location":"arc42-template/#whitebox-baustein-2-_whitebox_emphasis_baustein_2_emphasis","text":"\\<Whitebox-Template> ...","title":"Whitebox \\&lt;Baustein 2> {#_whitebox_emphasis_baustein_2_emphasis}"},{"location":"arc42-template/#whitebox-baustein-m-_whitebox_emphasis_baustein_m_emphasis","text":"\\<Whitebox-Template>","title":"Whitebox \\&lt;Baustein m> {#_whitebox_emphasis_baustein_m_emphasis}"},{"location":"arc42-template/#ebene-3-_ebene_3","text":"Beschreiben Sie den inneren Aufbau (einiger) Bausteine aus Ebene 2 als Whitebox. Bei tieferen Gliederungen der Architektur kopieren Sie diesen Teil von arc42 f\u00fcr die weiteren Ebenen.","title":"Ebene 3 {#_ebene_3}"},{"location":"arc42-template/#whitebox-_baustein-x1_-_whitebox_baustein_x_1","text":"...zeigt das Innenleben von Baustein x.1 . \\<Whitebox-Template>","title":"Whitebox \\&lt;_Baustein x.1_> {#_whitebox_baustein_x_1}"},{"location":"arc42-template/#whitebox-_baustein-x2_-_whitebox_baustein_x_2","text":"\\<Whitebox-Template>","title":"Whitebox \\&lt;_Baustein x.2_> {#_whitebox_baustein_x_2}"},{"location":"arc42-template/#whitebox-_baustein-y1_-_whitebox_baustein_y_1","text":"\\<Whitebox-Template>","title":"Whitebox \\&lt;_Baustein y.1_> {#_whitebox_baustein_y_1}"},{"location":"arc42-template/#laufzeitsicht-section-runtime-view","text":"Inhalt. Diese Sicht erkl\u00e4rt konkrete Abl\u00e4ufe und Beziehungen zwischen Bausteinen in Form von Szenarien aus den folgenden Bereichen: Wichtige Abl\u00e4ufe oder Features : Wie f\u00fchren die Bausteine der Architektur die wichtigsten Abl\u00e4ufe durch? Interaktionen an kritischen externen Schnittstellen: Wie arbeiten Bausteine mit Nutzern und Nachbarsystemen zusammen? Betrieb und Administration: Inbetriebnahme, Start, Stop. Fehler- und Ausnahmeszenarien Anmerkung: Das Kriterium f\u00fcr die Auswahl der m\u00f6glichen Szenarien (d.h. Abl\u00e4ufe) des Systems ist deren Architekturrelevanz. Es geht nicht darum, m\u00f6glichst viele Abl\u00e4ufe darzustellen, sondern eine angemessene Auswahl zu dokumentieren. Motivation. Sie sollten verstehen, wie (Instanzen von) Bausteine(n) Ihres Systems ihre jeweiligen Aufgaben erf\u00fcllen und zur Laufzeit miteinander kommunizieren. Nutzen Sie diese Szenarien in der Dokumentation haupts\u00e4chlich f\u00fcr eine verst\u00e4ndlichere Kommunikation mit denjenigen Stakeholdern, die die statischen Modelle (z.B. Bausteinsicht, Verteilungssicht) weniger verst\u00e4ndlich finden. Form. F\u00fcr die Beschreibung von Szenarien gibt es zahlreiche Ausdrucksm\u00f6glichkeiten. Nutzen Sie beispielsweise: Nummerierte Schrittfolgen oder Aufz\u00e4hlungen in Umgangssprache Aktivit\u00e4ts- oder Flussdiagramme Sequenzdiagramme BPMN (Gesch\u00e4ftsprozessmodell und -notation) oder EPKs (Ereignis-Prozessketten) Zustandsautomaten ...","title":"Laufzeitsicht {#section-runtime-view}"},{"location":"arc42-template/#bezeichnung-laufzeitszenario-1-__emphasis_bezeichnung_laufzeitszenario_1_emphasis","text":"\\<hier Laufzeitdiagramm oder Ablaufbeschreibung einf\u00fcgen> \\<hier Besonderheiten bei dem Zusammenspiel der Bausteine in diesem Szenario erl\u00e4utern>","title":"\\&lt;Bezeichnung Laufzeitszenario 1> {#__emphasis_bezeichnung_laufzeitszenario_1_emphasis}"},{"location":"arc42-template/#bezeichnung-laufzeitszenario-2-__emphasis_bezeichnung_laufzeitszenario_2_emphasis","text":"...","title":"\\&lt;Bezeichnung Laufzeitszenario 2> {#__emphasis_bezeichnung_laufzeitszenario_2_emphasis}"},{"location":"arc42-template/#bezeichnung-laufzeitszenario-n-__emphasis_bezeichnung_laufzeitszenario_n_emphasis","text":"...","title":"\\&lt;Bezeichnung Laufzeitszenario n> {#__emphasis_bezeichnung_laufzeitszenario_n_emphasis}"},{"location":"arc42-template/#verteilungssicht-section-deployment-view","text":"Inhalt. Die Verteilungssicht beschreibt: die technische Infrastruktur, auf der Ihr System ausgef\u00fchrt wird, mit Infrastrukturelementen wie Standorten, Umgebungen, Rechnern, Prozessoren, Kan\u00e4len und Netztopologien sowie sonstigen Bestandteilen, und die Abbildung von (Software-)Bausteinen auf diese Infrastruktur. H\u00e4ufig laufen Systeme in unterschiedlichen Umgebungen, beispielsweise Entwicklung-/Test- oder Produktionsumgebungen. In solchen F\u00e4llen sollten Sie alle relevanten Umgebungen aufzeigen. Nutzen Sie die Verteilungssicht insbesondere dann, wenn Ihre Software auf mehr als einem Rechner, Prozessor, Server oder Container abl\u00e4uft oder Sie Ihre Hardware sogar selbst konstruieren. Aus Softwaresicht gen\u00fcgt es, auf die Aspekte zu achten, die f\u00fcr die Softwareverteilung relevant sind. Insbesondere bei der Hardwareentwicklung kann es notwendig sein, die Infrastruktur mit beliebigen Details zu beschreiben. Motivation. Software l\u00e4uft nicht ohne Infrastruktur. Diese zugrundeliegende Infrastruktur beeinflusst Ihr System und/oder querschnittliche L\u00f6sungskonzepte, daher m\u00fcssen Sie diese Infrastruktur kennen. Form. Das oberste Verteilungsdiagramm k\u00f6nnte bereits in Ihrem technischen Kontext enthalten sein, mit Ihrer Infrastruktur als EINE Blackbox. Jetzt zoomen Sie in diese Infrastruktur mit weiteren Verteilungsdiagrammen hinein: Die UML stellt mit Verteilungsdiagrammen (Deployment diagrams) eine Diagrammart zur Verf\u00fcgung, um diese Sicht auszudr\u00fccken. Nutzen Sie diese, evtl. auch geschachtelt, wenn Ihre Verteilungsstruktur es verlangt. Falls Ihre Infrastruktur-Stakeholder andere Diagrammarten bevorzugen, die beispielsweise Prozessoren und Kan\u00e4le zeigen, sind diese hier ebenfalls einsetzbar.","title":"Verteilungssicht {#section-deployment-view}"},{"location":"arc42-template/#infrastruktur-ebene-1-_infrastruktur_ebene_1","text":"An dieser Stelle beschreiben Sie (als Kombination von Diagrammen mit Tabellen oder Texten): die Verteilung des Gesamtsystems auf mehrere Standorte, Umgebungen, Rechner, Prozessoren o. \u00c4., sowie die physischen Verbindungskan\u00e4le zwischen diesen, wichtige Begr\u00fcndungen f\u00fcr diese Verteilungsstruktur, Qualit\u00e4ts- und/oder Leistungsmerkmale dieser Infrastruktur, Zuordnung von Softwareartefakten zu Bestandteilen der Infrastruktur F\u00fcr mehrere Umgebungen oder alternative Deployments kopieren Sie diesen Teil von arc42 f\u00fcr alle wichtigen Umgebungen/Varianten. \\<\u00dcbersichtsdiagramm> Begr\u00fcndung : \\<Erl\u00e4uternder Text> Qualit\u00e4ts- und/oder Leistungsmerkmale : \\<Erl\u00e4uternder Text> Zuordnung von Bausteinen zu Infrastruktur : \\<Beschreibung der Zuordnung>","title":"Infrastruktur Ebene 1 {#_infrastruktur_ebene_1}"},{"location":"arc42-template/#infrastruktur-ebene-2-_infrastruktur_ebene_2","text":"An dieser Stelle k\u00f6nnen Sie den inneren Aufbau (einiger) Infrastrukturelemente aus Ebene 1 beschreiben. F\u00fcr jedes Infrastrukturelement kopieren Sie die Struktur aus Ebene 1.","title":"Infrastruktur Ebene 2 {#_infrastruktur_ebene_2}"},{"location":"arc42-template/#infrastrukturelement-1-__emphasis_infrastrukturelement_1_emphasis","text":"\\<Diagramm + Erl\u00e4uterungen>","title":"\\&lt;Infrastrukturelement 1> {#__emphasis_infrastrukturelement_1_emphasis}"},{"location":"arc42-template/#infrastrukturelement-2-__emphasis_infrastrukturelement_2_emphasis","text":"\\<Diagramm + Erl\u00e4uterungen> ...","title":"\\&lt;Infrastrukturelement 2> {#__emphasis_infrastrukturelement_2_emphasis}"},{"location":"arc42-template/#infrastrukturelement-n-__emphasis_infrastrukturelement_n_emphasis","text":"\\<Diagramm + Erl\u00e4uterungen>","title":"\\&lt;Infrastrukturelement n> {#__emphasis_infrastrukturelement_n_emphasis}"},{"location":"arc42-template/#querschnittliche-konzepte-section-concepts","text":"Inhalt. Dieser Abschnitt beschreibt \u00fcbergreifende, prinzipielle Regelungen und L\u00f6sungsans\u00e4tze, die an mehreren Stellen (= querschittlich ) relevant sind. Solche Konzepte betreffen oft mehrere Bausteine. Dazu k\u00f6nnen vielerlei Themen geh\u00f6ren, beispielsweise: fachliche Modelle, eingesetzte Architektur- oder Entwurfsmuster, Regeln f\u00fcr den konkreten Einsatz von Technologien, prinzipielle\u2009---\u2009meist technische\u2009---\u2009Festlegungen \u00fcbergreifender Art, Implementierungsregeln Motivation. Konzepte bilden die Grundlage f\u00fcr konzeptionelle Integrit\u00e4t (Konsistenz, Homogenit\u00e4t) der Architektur und damit eine wesentliche Grundlage f\u00fcr die innere Qualit\u00e4t Ihrer Systeme. Manche dieser Themen lassen sich nur schwer als Baustein in der Architektur unterbringen (z.B. das Thema \u201eSicherheit\"). Hier ist der Platz im Template, wo Sie derartige Themen geschlossen behandeln k\u00f6nnen. Form. Kann vielf\u00e4ltig sein: Konzeptpapiere mit beliebiger Gliederung, \u00fcbergreifende Modelle/Szenarien mit Notationen, die Sie auch in den Architektursichten nutzen, beispielhafte Implementierung speziell f\u00fcr technische Konzepte, Verweise auf \u201e\u00fcbliche\" Nutzung von Standard-Frameworks (beispielsweise die Nutzung von Hibernate als Object/Relational Mapper). Struktur. Eine m\u00f6gliche (nicht aber notwendige!) Untergliederung dieses Abschnittes k\u00f6nnte wie folgt aussehen (wobei die Zuordnung von Themen zu den Gruppen nicht immer eindeutig ist): Fachliche Konzepte User Experience (UX) Sicherheitskonzepte (Safety und Security) Architektur- und Entwurfsmuster Unter-der-Haube Entwicklungskonzepte Betriebskonzepte","title":"Querschnittliche Konzepte {#section-concepts}"},{"location":"arc42-template/#konzept-1-__emphasis_konzept_1_emphasis","text":"\\<Erkl\u00e4rung>","title":"\\&lt;Konzept 1> {#__emphasis_konzept_1_emphasis}"},{"location":"arc42-template/#konzept-2-__emphasis_konzept_2_emphasis","text":"\\<Erkl\u00e4rung> ...","title":"\\&lt;Konzept 2> {#__emphasis_konzept_2_emphasis}"},{"location":"arc42-template/#konzept-n-__emphasis_konzept_n_emphasis","text":"\\<Erkl\u00e4rung>","title":"\\&lt;Konzept n> {#__emphasis_konzept_n_emphasis}"},{"location":"arc42-template/#entwurfsentscheidungen-section-design-decisions","text":"Inhalt. Wichtige, teure, gro\u00dfe oder riskante Architektur- oder Entwurfsentscheidungen inklusive der jeweiligen Begr\u00fcndungen. Mit \\\"Entscheidungen\\\" meinen wir hier die Auswahl einer von mehreren Alternativen unter vorgegebenen Kriterien. W\u00e4gen Sie ab, inwiefern Sie Entscheidungen hier zentral beschreiben, oder wo eine lokale Beschreibung (z.B. in der Whitebox-Sicht von Bausteinen) sinnvoller ist. Vermeiden Sie Redundanz. Verweisen Sie evtl. auf Abschnitt 4, wo schon grundlegende strategische Entscheidungen beschrieben wurden. Motivation. Stakeholder des Systems sollten wichtige Entscheidungen verstehen und nachvollziehen k\u00f6nnen. Form. Verschiedene M\u00f6glichkeiten: Liste oder Tabelle, nach Wichtigkeit und Tragweite der Entscheidungen geordnet ausf\u00fchrlicher in Form einzelner Unterkapitel je Entscheidung ADR ( Architecture Decision Record ) f\u00fcr jede wichtige Entscheidung","title":"Entwurfsentscheidungen {#section-design-decisions}"},{"location":"arc42-template/#qualitatsanforderungen-section-quality-scenarios","text":"Inhalt. Dieser Abschnitt enth\u00e4lt m\u00f6glichst alle Qualit\u00e4tsanforderungen als Qualit\u00e4tsbaum mit Szenarien. Die wichtigsten davon haben Sie bereits in Abschnitt 1.2 (Qualit\u00e4tsziele) hervorgehoben. Nehmen Sie hier auch Qualit\u00e4tsanforderungen geringerer Priorit\u00e4t auf, deren Nichteinhaltung oder -erreichung geringe Risiken birgt. Motivation. Weil Qualit\u00e4tsanforderungen die Architekturentscheidungen oft ma\u00dfgeblich beeinflussen, sollten Sie die f\u00fcr Ihre Stakeholder relevanten Qualit\u00e4tsanforderungen kennen, m\u00f6glichst konkret und operationalisiert.","title":"Qualit\u00e4tsanforderungen {#section-quality-scenarios}"},{"location":"arc42-template/#qualitatsbaum-_qualit_tsbaum","text":"Inhalt. Der Qualit\u00e4tsbaum (\u00e0 la ATAM) mit Qualit\u00e4tsszenarien an den Bl\u00e4ttern. Motivation. Die mit Priorit\u00e4ten versehene Baumstruktur gibt \u00dcberblick \u00fcber die\u2009---\u2009oftmals zahlreichen\u2009---\u2009Qualit\u00e4tsanforderungen. Baumartige Verfeinerung des Begriffes \u201eQualit\u00e4t\", mit \u201eQualit\u00e4t\" oder \u201eN\u00fctzlichkeit\" als Wurzel. Mindmap mit Qualit\u00e4tsoberbegriffen als Hauptzweige In jedem Fall sollten Sie hier Verweise auf die Qualit\u00e4tsszenarien des folgenden Abschnittes aufnehmen.","title":"Qualit\u00e4tsbaum {#_qualit_tsbaum}"},{"location":"arc42-template/#qualitatsszenarien-_qualit_tsszenarien","text":"Inhalt. Konkretisierung der (in der Praxis oftmals vagen oder impliziten) Qualit\u00e4tsanforderungen durch (Qualit\u00e4ts-)Szenarien. Diese Szenarien beschreiben, was beim Eintreffen eines Stimulus auf ein System in bestimmten Situationen geschieht. Wesentlich sind zwei Arten von Szenarien: Nutzungsszenarien (auch bekannt als Anwendungs- oder Anwendungsfallszenarien) beschreiben, wie das System zur Laufzeit auf einen bestimmten Ausl\u00f6ser reagieren soll. Hierunter fallen auch Szenarien zur Beschreibung von Effizienz oder Performance. Beispiel: Das System beantwortet eine Benutzeranfrage innerhalb einer Sekunde. \u00c4nderungsszenarien beschreiben eine Modifikation des Systems oder seiner unmittelbaren Umgebung. Beispiel: Eine zus\u00e4tzliche Funktionalit\u00e4t wird implementiert oder die Anforderung an ein Qualit\u00e4tsmerkmal \u00e4ndert sich. Motivation. Szenarien operationalisieren Qualit\u00e4tsanforderungen und machen deren Erf\u00fcllung mess- oder entscheidbar. Insbesondere wenn Sie die Qualit\u00e4t Ihrer Architektur mit Methoden wie ATAM \u00fcberpr\u00fcfen wollen, bed\u00fcrfen die in Abschnitt 1.2 genannten Qualit\u00e4tsziele einer weiteren Pr\u00e4zisierung bis auf die Ebene von diskutierbaren und nachpr\u00fcfbaren Szenarien. Form. Entweder tabellarisch oder als Freitext.","title":"Qualit\u00e4tsszenarien {#_qualit_tsszenarien}"},{"location":"arc42-template/#risiken-und-technische-schulden-section-technical-risks","text":"Inhalt. Eine nach Priorit\u00e4ten geordnete Liste der erkannten Architekturrisiken und/oder technischen Schulden. Risikomanagement ist Projektmanagement f\u00fcr Erwachsene. --- Tim Lister Atlantic Systems Guild Unter diesem Motto sollten Sie Architekturrisiken und/oder technische Schulden gezielt ermitteln, bewerten und Ihren Management-Stakeholdern (z.B. Projektleitung, Product-Owner) transparent machen. Form. Liste oder Tabelle von Risiken und/oder technischen Schulden, eventuell mit vorgeschlagenen Ma\u00dfnahmen zur Risikovermeidung, Risikominimierung oder dem Abbau der technischen Schulden.","title":"Risiken und technische Schulden {#section-technical-risks}"},{"location":"arc42-template/#glossar-section-glossary","text":"Inhalt. Die wesentlichen fachlichen und technischen Begriffe, die Stakeholder im Zusammenhang mit dem System verwenden. Nutzen Sie das Glossar ebenfalls als \u00dcbersetzungsreferenz, falls Sie in mehrsprachigen Teams arbeiten. Motivation. Sie sollten relevante Begriffe klar definieren, so dass alle Beteiligten diese Begriffe identisch verstehen, und vermeiden, mehrere Begriffe f\u00fcr die gleiche Sache zu haben. Zweispaltige Tabelle mit \\<Begriff> und \\<Definition> Eventuell weitere Spalten mit \u00dcbersetzungen, falls notwendig. +-----------------------+-----------------------------------------------+ | Begriff | Definition | +=======================+===============================================+ | \\<Begriff-1> | \\<Definition-1> | +-----------------------+-----------------------------------------------+ | \\<Begriff-2 | \\<Definition-2> | +-----------------------+-----------------------------------------------+","title":"Glossar {#section-glossary}"},{"location":"config/","text":"","title":"Config"}]}